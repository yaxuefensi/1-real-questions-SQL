高频的friend request题目
table
date|time|sender_id|receiver_id|type(这个楼主有点记不清楚了，好像是comment/friend_request.... )


1) calculate the friend requests on a specific date
2) calcualte the trend of acceptance rate
这道题楼主最开始写错了，忘记join table的condition。面试官是一个中国大哥，特别nice，他指出来了，我改正了。
然后他suggest我们要有一个Time period, 如果过了一个time period那不我们就不count这个request了。这个我用的datediff。


我的题是这样的
sender_id| receiver_id| action| date
sender_id: 动作发出者
receiver_id: 动作接受者
action: {request, accept}
date: 动作日期

Q： 某一日的acceptance rate

My Solution:
To confirm question, does thie mean the for all the requests sent in this day, how many of them are accepted, the 
ratio is the acceptance rate?  
1) Do we have a time limit as to how long the request can be waiting? 
2) Can a sender send multiple requests to one receiver? My experience is that once you click the 'add friend' button on facebook,
the button will change to 'friend request sent'. So A send cannot send multiple requests to one receiver. Am I resonable? 
3) Can a receiver accept multiple requests from one sender?

If no limit:

SELECT ROUND(IFNULL(COUNT(accept_tbl.sender_id)/COUNT(request_tbl.sender_id),0),2)
FROM
(
SELECT sender_id, reciever_id
FROM table
WHERE action = 'request' and date = '2018-10-28'
) AS request_tbl
LEFT JOIN
(
SELECT sender_id, receiver_id
FROM table
WHERE action = 'accept' AND date>= '2018-10-28'
) AS accept_tbl
ON request_tbl.sender_id = accept_tbl.receiver_id
 AND request_tbl.receiver_id = accept_tbl.sender_id
 
 IF there is a limit, for example, receiver has to accept within 18 hours. 

SELECT ROUND(IFNULL(COUNT(accept_tbl.sender_id)/COUNT(request_tbl.sender_id),0),2) AS accept_rate
FROM
(
SELECT sender_id, reciever_id,time
FROM table
WHERE action = 'request' and date = '2018-10-28'
) AS request_tbl
LEFT JOIN
(
SELECT sender_id, receiver_id, time
FROM table
WHERE action = 'accept'
) AS accept_tbl
ON request_tbl.sender_id = accept_tbl.receiver_id
AND request_tbl.receiver_id = accept_tbl.sender_id
WHERE DATEDIFF(hour,request_tbl.time,accept_tbl.time) <18



我开始写错了，写成了在某一天内所有的accept除以那天所有的request，后来面试官姐姐说她想要的是在某一天发出的所有request，共有多少被接收，
我说那样的话需要把accpet和request都match起来，然后计算ratio

select ifnull(sum(case when action = 'accept' then 1 else 0 end)/sum(case when action = 'request' then 1 else 0 end),0)
from table. 
where date = '2018-5-2'
这是我第一版

select ifnull(count(t2.date)/count(t1.date),0) as acceptance_rate
from table t1 
left join table t2 
on t1.sender_id = t2.receiver_id and t1.receiver_id = t2.sender_id and t2.action = 'accept'
where t1.action = 'request' and date = '2018-5-2'
这是第二版. 

可能我写的比较快，所以她没有别的任何意见就过了

第二问是紧跟第一问的，如果某天Acceptance rate掉了10%，怎么处理？ 还有一些follow-up 问题，如果你新开发的feature，实现了20%的CTR，你如何
评价这个feature是好的，也就是说你怎么评价这个20%是好还是坏？

这部分，我答得一般，主要是面试官太challenging了，keep asking whatelse...后来阵脚就乱了



Select final_data.sending_time, sum(final_date.indicators)/count(final_date.indicators) as acceptance_rate from 
Select 
        sending.sending_time
        case when accepting.accepting_time is not null then 1 else 0 end as indicator
from
        (Select f1.actor_id, f1.target_id, min(f1.datetime) as sending_time 
        from friending f1
        Where f1.action = ‘request_sent’
        Group by f1.actor_id, f1.target_id ) sending
Left join 
        (Select f2.actor_id, f2.target_id, f2.datetime as accepting_time 
        from friending f2
        Where f2.action = ‘request_accepted’ ) accepting
On (sending.actor_id = accepting.target_id) and (sending.target_id = accepting.actor_id). 
) final_data

补充内容 (2018-9-4 03:17):
看了其他面经 据说是一个人可以发multiple friend request, 但是我不确定一个人能不能多次accept friend request
最后一行少了一个 group by final_data.senidng_time


考了一题sql，有陷阱，中间夹了产品的问题.

table friending：
date，action（‘send’，‘accept’），user_id，target_id
计算acceptance rate treding by time
每个用户能发送一次，每个用户也只能接受一次，a发了request给b，b就不能发送给a，只能接受或忽略。
如果a发送request给b，b接受了才能认为是accept，否则不算。
我当时问了时间长度的问题，被反问觉得应该选择多长的时间？
我直觉说了一句monthly，问为什么是monthly，想了想说应该算average frequency for send or accept，再根据这个定时间。
追问用现有表格如何算average frequency？说了一下。
最后让用一个月为期限，算acceptance rate。


同楼上，我也觉得acceptance rate只要用overall的就行了，其实对于business来说是很make sense了的，而且比较actionable. 如果考官追
问要perfect match每一个request和accept那再去研究具体的。而且对于time window，取一个percentile可能更好一些，比如90%，用来包括大多数的accept。

我觉得 第一题选择时间window 应该用所有已经成为朋友的用户data 算 accept.date - sent.date 的平均值，而不是看频率

这题里面应该还有个time window，就是你准备计算多久的trending，总不能把n年前的数据全算出来吧？
反正这个我没有想明白，但是算多久的数据呢？我个人觉得展示半年或一季度，但是这个time window的根据是什么？
包括这个acceptance rate，是要计算每天的吗？还是计算一个星期的？全是坑啊！
我后面都不敢多问了，怕给自己挖坑。


时间window的问题是不是应该答average（accept- send）？ 这个是不是看看最近的数据就可以了？ 最近几个月最多一年？ 
还是系统可能有限制，应该用那个限制？

或者是我想简单了？如果写错了求帮忙纠正啊！
既然每个用户能发送一次，每个用户也只能接受一次，a发了request给b，b就不能发送给a，只能接受或忽略，所以这个table大概是这个样子：
Date        action        User_id        Target_id
31-May        Send              1        2
1-Jun        Accept             2        1
2-Jun        send               1        3
3-Jun        Accept             3        1
4-Jun        Send               2        4
5-Jun        ？                 4        2
6-Jun        Send               3        4
7-Jun        ？                 4        3

然后就是成对出现，就成了下面的code：

Select Date, sum(case when action=’Accept’ then 1 else 0)/Sum(case when action=’Send’ then 1 else 0)
As acceptance_rate 
from friending 
group by Date 
order by date;


补充内容 (2018-6-5 07:53):
丢了end..... more info on 1point3acres
Select Date, sum(case when action=’Accept’ then 1 else 0 end)/Sum(case when action=’Send’ then 1 else 0 end)
As acceptance_rate from friending group by Date order by date;

我当时怀疑我听错了，一开始写了overall rate，面试官说不对，他说要一对一match才算。
所以有一个time window，某个时间段内的request可以accept，超过这个时间段就没办法accept。他当时还反问我，如果2年前的一个request，
2年后也能被accept吗？我回答不能，他问多久之内的能accept，这个time window怎么算？
我觉得平均值有点不对，应该是过去接受和发送之间的最大值，但不能是outlier。如果以平均值作为time window，那超过平均时长的request是
能被接受的。实际的产品里，好像超过几天的request就过期了，微信fb qq都有这样的机制，所以用户发送和接受的时差肯定< time window。

I think below query would make more sense. Group by the date when the request was sent. You can always add a date range 
condition by adding another AND statement following the LEFT JOIN.

SELECT s.date
             , SUM(CASE WHEN a.action='accept' THEN 1 ELSE NULL END)/COUNT(s.user_id) AS acceptance_rate
      FROM (SELECT date
                                 , user_id
                                 , target_id
                         FROM friending 
                        WHERE action='send') s
     LEFT JOIN friending a
    ON s.user_id=a.target_id
   AND s.target_id=a.user_id
-- AND a.date - s.date <= 30    ---additional criteria
GROUP BY s.date
ORDER BY s.date





